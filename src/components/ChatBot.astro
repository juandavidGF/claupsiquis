---

---

<div class="chat-widget">
  <button class="chat-toggle" aria-label="Toggle chat" id="chatToggle">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
    </svg>
  </button>

  <div class="chat-container" id="chatContainer">
    <div class="chat-header">
      <h5>Chatbot Assistant</h5>
      <button class="close-button" id="closeChat">×</button>
    </div>
    
    <div class="chat-messages">
      <div class="message bot">
        <p>Hola, cómo puedo ayudarte?</p>
      </div>
      <div class="message user" />
    </div>

    <div class="chat-input">
      <input type="text" placeholder="Type your message..." id="messageInput">
      <button class="send-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </div>
  </div>
</div>

<style is:global>
  .chat-widget {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1000;
  }

  .chat-toggle {
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 50%;
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
    color: var(--gray-300);
    box-shadow: var(--shadow-md);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s;
  }

  .chat-toggle:hover {
    transform: scale(1.1);
  }

  .chat-container {
    position: absolute;
    bottom: 5rem;
    right: 0;
    width: 420px;
    height: 650px;
    background: var(--gray-999);
    border: 1px solid var(--gray-800);
    border-radius: 1.5rem;
    box-shadow: var(--shadow-lg);
    display: none;
    flex-direction: column;
  }

  .chat-container.active {
    display: flex;
  }

  .chat-header {
    padding: 1rem;
    border-bottom: 1px solid var(--gray-800);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h3 {
    margin: 0;
    color: var(--gray-300);
  }

  .close-button {
    background: none;
    border: none;
    color: var(--gray-300);
    font-size: 1.5rem;
    cursor: pointer;
  }

  .chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
  }

  .message {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    width: 100%;
  }

  .message p {
    max-width: 80%;
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    margin: 0;
    word-break: break-word;
  }

  .message.user {
    align-items: flex-end;
  }

  .message.bot {
    align-items: flex-start;
  }

  .message.user p {
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
    color: var(--gray-300);
    border-top-right-radius: 0.2rem;
  }

  .message.bot p {
    background: var(--gray-999);
    border: 1px solid var(--gray-800);
    color: var(--gray-300);
    border-top-left-radius: 0.2rem;
  }

  .chat-input {
    padding: 1rem;
    border-top: 1px solid var(--gray-800);
    display: flex;
    gap: 0.5rem;
  }

  .chat-input input {
    flex: 1;
    padding: 0.5rem 1rem;
    border-radius: 1.5rem;
    border: 1px solid var(--gray-800);
    background: var(--gray-999);
    color: var(--gray-300);
  }

  .send-button {
    background: none;
    border: none;
    color: var(--gray-300);
    cursor: pointer;
    padding: 0.5rem;
  }
</style>

<script>
  const chatToggle = document.getElementById('chatToggle');
  const chatContainer = document.getElementById('chatContainer');
  const closeChat = document.getElementById('closeChat');
  const messageInput = document.getElementById('messageInput') as HTMLInputElement;
  const sendButton = document.querySelector('.send-button');
  const chatMessages = document.querySelector('.chat-messages');

  // Toggle chat functions
  chatToggle?.addEventListener('click', () => {
    chatContainer?.classList.toggle('active');
  });

  closeChat?.addEventListener('click', () => {
    chatContainer?.classList.remove('active');
  });

  // Add message to chat
  function addMessage(message: string, isBot: boolean) {
    // Crear el div principal del mensaje
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isBot ? 'bot' : 'user'}`;
    
    // Crear el párrafo del mensaje
    const messageParagraph = document.createElement('p');
    messageParagraph.textContent = message;  // Usar textContent en lugar de innerHTML por seguridad
    
    // Agregar el párrafo al div del mensaje
    messageDiv.appendChild(messageParagraph);
    
    // Agregar el mensaje al contenedor de chat
    chatMessages?.appendChild(messageDiv);
    chatMessages?.scrollTo(0, chatMessages.scrollHeight);
  }

  // Send message
  async function sendMessage() {
    const message = messageInput?.value.trim();
    if (!message) return;

    // Add user message to chat
    addMessage(message, false);
    messageInput.value = '';

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      });

      if (!response.ok) {
        throw new Error('Failed to get response');
      }

      const data = await response.json();
      addMessage(data.message, true);
    } catch (error) {
      addMessage('Sorry, I encountered an error. Please try again.', true);
    }
  }

  // Event listeners for sending messages
  sendButton?.addEventListener('click', sendMessage);
  messageInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
</script>

